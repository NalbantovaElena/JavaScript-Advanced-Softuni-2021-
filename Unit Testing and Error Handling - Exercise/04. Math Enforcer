describe('mathEnforcer function test', () => {

    describe('addFive function test', () => {
        //Test incorrect value
        it('Should return undefined with string', () => {
            assert(mathEnforcer.addFive('test') === undefined)
        })
        it('Should return undefined with an array', () => {
            assert(mathEnforcer.addFive([]) === undefined)
        })
        it('Should return undefined with an object', () => {
            assert(mathEnforcer.addFive({}) === undefined)
        })
        it('Should return undefined with undefined', () => {
            assert(mathEnforcer.addFive(undefined) === undefined)
        })
        it('Should return undefined with null', () => {
            assert(mathEnforcer.addFive(null) === undefined)
        })

        //test correct value
        it('Should return +5', () => {
            assert(mathEnforcer.addFive(5) === 10)
        })
        it('Should return -5', () => {
            assert(mathEnforcer.addFive(-5) === 0)
        })
        it('Should return +10,5', () => {
            assert(mathEnforcer.addFive(10.5) === 15.5)
        })
    })

    describe('subtractTen function test', () => {
        it('Should return undefined with string', () => {
            assert(mathEnforcer.subtractTen('test') === undefined)
        })
        it('Should return undefined with an array', () => {
            assert(mathEnforcer.subtractTen([]) === undefined)
        })
        it('Should return undefined with an object', () => {
            assert(mathEnforcer.subtractTen({}) === undefined)
        })
        it('Should return undefined with undefined', () => {
            assert(mathEnforcer.subtractTen(undefined) === undefined)
        })
        it('Should return undefined with null', () => {
            assert(mathEnforcer.subtractTen(null) === undefined)
        })

        //test correct value
        it('Should return -10', () => {
            assert(mathEnforcer.subtractTen(5) === -5)
        })
        it('Should return -10', () => {
            assert(mathEnforcer.subtractTen(-5) === -15)
        })
        it('Should return -10', () => {
            assert(mathEnforcer.subtractTen(10.5) === 0.5)
        })
    })

    describe('sum of two numbers function test', () => {
        it('two positive integer numbers', () => {
            assert(mathEnforcer.sum(5, 5) === 10)
        })
        it('two positive integer numbers', () => {
            assert(mathEnforcer.sum(-5, 5) === 0)
        })
        it('two positive integer numbers', () => {
            assert(mathEnforcer.sum(5.1, 5.2) === 10.3)
        })

        it('first parameter string', () => {
            assert(mathEnforcer.sum('', 5) === undefined)
        })
        it('second parameter string', () => {
            assert(mathEnforcer.sum(5, '') === undefined)
        })
        it('second parameter string', () => {
            assert(mathEnforcer.sum(5, {}) === undefined)
        })
        it('second parameter string', () => {
            assert(mathEnforcer.sum({}, 5) === undefined)
        })
        it('second parameter string', () => {
            assert(mathEnforcer.sum([], 5) === undefined)
        })
        it('second parameter string', () => {
            assert(mathEnforcer.sum(5, []) === undefined)
        })
        it('second parameter string', () => {
            assert(mathEnforcer.sum(5, []) === undefined)
        })
       
    })

})
